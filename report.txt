#0
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/checker/ArchiveUsing7ZipChecker.java:38: error: Resource Leak
  resource of type `java.lang.Process` acquired by call to `exec(...)` at line 38 is not released after line 38.
  36.       public boolean prepareChecker() {
  37.           try {
  38. >             Runtime.getRuntime().exec(toolPath);
  39.           } catch (IOException e) {
  40.               return false;

#1
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/checker/RarUsingRarChecker.java:42: error: Resource Leak
  resource of type `java.lang.Process` acquired by call to `exec(...)` at line 42 is not released after line 42.
  40.       public boolean prepareChecker() {
  41.           try {
  42. >             Runtime.getRuntime().exec(toolPath);
  43.           } catch (IOException e) {
  44.               return false;

#2
src/main/java/edu/jiangxin/apktoolbox/file/core/EncoderConvert.java:59: error: Resource Leak
  resource of type `java.io.FileInputStream` acquired by call to `FileInputStream(...)` at line 59 is not released after line 59.
  57.   
  58.           // TODO see http://akini.mbnet.fi/java/unicodereader/
  59. >         try (BufferedReader reader = new BufferedReader(
  60.                   new InputStreamReader(new FileInputStream(srcFileFile), srcEncoder));
  61.                   BufferedWriter writer = new BufferedWriter(

#3
src/main/java/edu/jiangxin/apktoolbox/file/core/EncoderConvert.java:61: error: Resource Leak
  resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 61 is not released after line 61.
  59.           try (BufferedReader reader = new BufferedReader(
  60.                   new InputStreamReader(new FileInputStream(srcFileFile), srcEncoder));
  61. >                 BufferedWriter writer = new BufferedWriter(
  62.                           new OutputStreamWriter(new FileOutputStream(desFileFile), desEncoder))) {
  63.               int ch = 0;

#4
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/checker/ArchiveUsingWinRarChecker.java:43: error: Resource Leak
  resource of type `java.lang.Process` acquired by call to `exec(...)` at line 43 is not released after line 43.
  41.       public boolean prepareChecker() {
  42.           try {
  43. >             Runtime.getRuntime().exec(toolPath);
  44.           } catch (IOException e) {
  45.               return false;

#5
src/main/java/edu/jiangxin/apktoolbox/file/checksum/panel/CompareFilesPanel.java:88: error: Resource Leak
  resource of type `java.io.FileInputStream` acquired by call to `FileInputStream(...)` at line 83 is not released after line 88.
**Note**: potential exception at line 84
  86.                   String secondSha512 = DigestUtils.sha512Hex(secondFis);
  87.                   isChecksumSame = StringUtils.equalsIgnoreCase(firstSha512, secondSha512);
  88. >             } catch (FileNotFoundException e) {
  89.                   logger.error("calculate, FileNotFoundException");
  90.               } catch (IOException e) {

#6
src/main/java/edu/jiangxin/apktoolbox/file/zhconvert/ZHConverterUtils.java:92: error: Resource Leak
  resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 90 is not released after line 92.
**Note**: potential exception at line 91
  90.           try (OutputStream out = new FileOutputStream(filePath)) {
  91.               charMap.store(out, "加入新元素");
  92. >         } catch (IOException e) {
  93.               logger.error("storeDataToProperties failed: IOException");
  94.           }

#7
src/main/java/edu/jiangxin/apktoolbox/file/zhconvert/ZHConverterUtils.java:99: error: Resource Leak
  resource of type `java.io.FileOutputStream` acquired by call to `FileOutputStream(...)` at line 97 is not released after line 99.
**Note**: potential exception at line 91
   97.           try (OutputStream out2 = new FileOutputStream(filePath2)) {
   98.               charMap2.store(out2, "加入新元素");
   99. >         } catch (IOException e) {
  100.               logger.error("storeDataToProperties failed: IOException");
  101.           }

#8
src/main/java/edu/jiangxin/apktoolbox/reverse/AxmlPrinterPanel.java:207: error: Resource Leak
  resource of type `java.util.zip.ZipFile` acquired by call to `ZipFile(...)` at line 175 is not released after line 207.
**Note**: potential exception at line 197
  205.                       logger.info("exitValue: [" + exitValue + "]");
  206.                   }
  207. >             } catch (IOException e1) {
  208.                   logger.error("axmlprinter fail", e1);
  209.               }

#9
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/RecoveryPanel.java:394: error: Resource Leak
  resource of type `java.io.FileInputStream` acquired by call to `FileInputStream(...)` at line 394 is not released after line 394.
  392.               return;
  393.           }
  394. >         try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(dictionaryFile), charsetName))) {
  395.               setIsRecovering(true);
  396.               setProgressMaxValue(Utils.getFileLineCount(dictionaryFile));

#10
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/bruteforce/BruteForceFuture.java:33: warning: Thread Safety Violation
  Read/Write race. Non-private method `BruteForceFuture.get()` indirectly reads without synchronization from `this.result`. Potentially races with write in method `BruteForceFuture.set(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  31.   
  32.   // Complete this class using a lock and the condition variable
  33. > public class BruteForceFuture implements Future<String> {
  34.       private static final Logger logger = LogManager.getLogger(BruteForceFuture.class.getSimpleName());
  35.       private String result = null;

#11
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/bruteforce/BruteForceFuture.java:75: warning: Thread Safety Violation
  Read/Write race. Non-private method `BruteForceFuture.get()` reads without synchronization from `this.result`. Potentially races with write in method `BruteForceFuture.set(...)`.
 Reporting because this access may occur on a background thread.
  73.               lock.unlock();
  74.           }
  75. >         return result;
  76.       }
  77.   

#12
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/bruteforce/BruteForceFuture.java:83: warning: Thread Safety Violation
  Read/Write race. Non-private method `BruteForceFuture.isDone()` reads without synchronization from `this.result`. Potentially races with write in method `BruteForceFuture.set(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  81.       @Override
  82.       public boolean isDone() {
  83. >         return result != null;
  84.       }
  85.   

Found 13 issues
                        Issue Type(ISSUED_TYPE_ID): #
                      Resource Leak(RESOURCE_LEAK): 10
  Thread Safety Violation(THREAD_SAFETY_VIOLATION): 3
