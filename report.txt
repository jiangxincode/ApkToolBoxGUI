#0
src/main/java/edu/jiangxin/apktoolbox/file/core/EncoderConvert.java:135: error: Null Dereference
  null (null value originating from line 135) is dereferenced in the call to `EncoderConvert.encodeDir(...)`. 
  133.        */
  134.       public static void encodeDir(String srcDirString, String srcEncoder, String desDirString, String desEncoder) {
  135. >         encodeDir(srcDirString, srcEncoder, desDirString, desEncoder, null);
  136.       }
  137.   

#1
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/bruteforce/BruteForceFuture.java:15: warning: Thread Safety Violation
  Read/Write race. Non-private method `BruteForceFuture.get()` indirectly reads without synchronization from `this.result`, which races with the write in method `BruteForceFuture.set(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not. 
  13.   import java.util.concurrent.locks.ReentrantLock;
  14.   
  15. > public class BruteForceFuture implements Future<String> {
  16.       private static final Logger logger = LogManager.getLogger(BruteForceFuture.class.getSimpleName());
  17.       private String result = null;

#2
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/bruteforce/BruteForceFuture.java:52: warning: Thread Safety Violation
  Read/Write race. Non-private method `BruteForceFuture.get()` reads without synchronization from `this.result`, which races with the write in method `BruteForceFuture.set(...)`.
 Reporting because this access may occur on a background thread. 
  50.               lock.unlock();
  51.           }
  52. >         return result;
  53.       }
  54.   

#3
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/bruteforce/BruteForceFuture.java:57: warning: Thread Safety Violation
  Read/Write race. Non-private method `BruteForceFuture.isDone()` reads without synchronization from `this.result`, which races with the write in method `BruteForceFuture.set(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not. 
  55.       @Override
  56.       public boolean isDone() {
  57. >         return result != null;
  58.       }
  59.   

#4
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/checker/BinaryOfficeChecker.java:49: error: Resource Leak
  Resource dynamically allocated by constructor java.io.FileInputStream() on line 49 is not closed after the last access at line 49. 
  47.           boolean result = false;
  48.           Biff8EncryptionKey.setCurrentUserPassword(password);
  49. >         try (POIFSFileSystem pfs = new POIFSFileSystem(new FileInputStream(file))) {
  50.               String extension = FilenameUtils.getExtension(file.getName());
  51.               if ("xls".equals(extension)) {

#5
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/dictionary/multithread/DictionaryMultiThreadProxy.java:40: warning: Thread Safety Violation
  Unprotected write. Non-private method `DictionaryMultiThreadProxy.startAndGet(...)` writes to field `this.lineHandler` outside of synchronization.
 Reporting because this access may occur on a background thread. 
  38.               }
  39.           };
  40. >         lineHandler = new LineHandler(checker, new AtomicBoolean(false), synchronizer, callback);
  41.           String charsetName = EncoderDetector.judgeFile(file.getAbsolutePath());
  42.           BigFileReader.Builder builder = new BigFileReader.Builder(file.getAbsolutePath(), lineHandler);

#6
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/dictionary/multithread/DictionaryMultiThreadProxy.java:41: warning: Thread Safety Violation
  Unprotected write. Non-private method `DictionaryMultiThreadProxy.startAndGet(...)` indirectly writes to field `core.EncoderDetector.countDownLatch` outside of synchronization.
 Reporting because this access may occur on a background thread. 
  39.           };
  40.           lineHandler = new LineHandler(checker, new AtomicBoolean(false), synchronizer, callback);
  41. >         String charsetName = EncoderDetector.judgeFile(file.getAbsolutePath());
  42.           BigFileReader.Builder builder = new BigFileReader.Builder(file.getAbsolutePath(), lineHandler);
  43.           bigFileReader = builder

#7
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/dictionary/multithread/DictionaryMultiThreadProxy.java:42: warning: Thread Safety Violation
  Read/Write race. Non-private method `DictionaryMultiThreadProxy.startAndGet(...)` reads without synchronization from `this.lineHandler`, which races with the write in method `DictionaryMultiThreadProxy.startAndGet(...)`.
 Reporting because this access may occur on a background thread. 
  40.           lineHandler = new LineHandler(checker, new AtomicBoolean(false), synchronizer, callback);
  41.           String charsetName = EncoderDetector.judgeFile(file.getAbsolutePath());
  42. >         BigFileReader.Builder builder = new BigFileReader.Builder(file.getAbsolutePath(), lineHandler);
  43.           bigFileReader = builder
  44.                   .withThreadSize(threadNum)

#8
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/dictionary/multithread/DictionaryMultiThreadProxy.java:48: warning: Thread Safety Violation
  Unprotected write. Non-private method `DictionaryMultiThreadProxy.startAndGet(...)` writes to field `this.bigFileReader` outside of synchronization.
 Reporting because this access may occur on a background thread. 
  46.                   .withBufferSize(1024 * 1024)
  47.                   .withOnCompleteCallback(callback)
  48. >                 .build();
  49.           bigFileReader.start();
  50.           try {

#9
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/dictionary/multithread/DictionaryMultiThreadProxy.java:49: warning: Thread Safety Violation
  Read/Write race. Non-private method `DictionaryMultiThreadProxy.startAndGet(...)` reads without synchronization from `this.bigFileReader`, which races with the write in method `DictionaryMultiThreadProxy.startAndGet(...)`.
 Reporting because this access may occur on a background thread. 
  47.                   .withOnCompleteCallback(callback)
  48.                   .build();
  49. >         bigFileReader.start();
  50.           try {
  51.               synchronized (lock) {

#10
src/main/java/edu/jiangxin/apktoolbox/file/password/recovery/dictionary/multithread/DictionaryMultiThreadProxy.java:62: warning: Thread Safety Violation
  Read/Write race. Non-private method `DictionaryMultiThreadProxy.cancel()` reads without synchronization from `this.bigFileReader`, which races with the write in method `DictionaryMultiThreadProxy.startAndGet(...)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not. 
  60.   
  61.       public void cancel() {
  62. >         if (bigFileReader != null) {
  63.               bigFileReader.shutdown();
  64.           }

Found 11 issues
                        Issue Type(ISSUED_TYPE_ID): #
  Thread Safety Violation(THREAD_SAFETY_VIOLATION): 9
                Resource Leak(PULSE_RESOURCE_LEAK): 1
             Null Dereference(NULLPTR_DEREFERENCE): 1
